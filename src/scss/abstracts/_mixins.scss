// Centering
@mixin centered {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    // TODO, make it's width greater than 50% when it needs to be...
  }
  
  // Convert px to rem
  @function rem($size) {
    $rem-size: $size / 16;
    @return #{$rem-size}rem;
  }
  
  @function strip-unit($number) {
    @if type-of($number) == 'number' and not unitless($number) {
      @return $number / ($number * 0 + 1);
    }
  
    @return $number;
  }
  
  
  // Nice underline effect.
  // $scale-x basically means visibility, 0 for hidden (will come in on hover), or 1 to be visible from the start.
  // TODO... make it background for multi-lines
  @mixin nice-underline($color, $hover-color, $scale-x) {
    position: relative;
    text-decoration: none;
  
    &::before {
      background: $color;
      bottom: -2px;
      content: '';
      height: 2px;
      left: 0;
      position: absolute;
      transform: scaleX($scale-x);
      transition: transform .3s cubic-bezier(.4, 0, .2, 1);
      width: 100%;
    }
  
    &:hover::before {
      background: $hover-color;
      transform: scaleX(1);
    }
  }
  
  // Loading spinner
  @mixin loading-spinner($color: $color-primary, $size: 21px, $thickness: 6) {
    $svg: '<svg viewBox="-#{($thickness / 2)-1} -#{($thickness / 2)-1} #{36 + $thickness} #{36 + $thickness}" xmlns="http://www.w3.org/2000/svg" stroke="#{$color}"><g fill="none" fill-rule="evenodd"><g transform="translate(1 1)" stroke-width="#{$thickness}"><circle stroke-opacity=".5" cx="18" cy="18" r="18"/><path d="M36 18c0-9.94-8.06-18-18-18"></path></g></g></svg>';
    content: "";
    position: absolute;
    height: $size + 1;
    width: $size;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) rotate(0deg) ;
    background-image: #{inline-svg($svg)};
    background-size: contain;
    background-repeat: no-repeat;
    background-position: center;
    animation: spin 1s linear infinite;
  }
  
  @keyframes spin { 100% { transform: translate(-50%, -50%) rotate(360deg); } }
  
  // functions to urlencode the svg string
  @function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);
    @if $index {
      @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }
    @return $string;
  }
  @function url-encode($string) {
    $map: (
     "%": "%25",
     "<": "%3C",
     ">": "%3E",
     " ": "%20",
     "!": "%21",
     "*": "%2A",
     "'": "%27",
     '"': "%22",
     "(": "%28",
     ")": "%29",
     ";": "%3B",
     ":": "%3A",
     "@": "%40",
     "&": "%26",
     "=": "%3D",
     "+": "%2B",
     "$": "%24",
     ",": "%2C",
     "/": "%2F",
     "?": "%3F",
     "#": "%23",
     "[": "%5B",
     "]": "%5D"
     );
    $new: $string;
    @each $search, $replace in $map {
      $new: str-replace($new, $search, $replace);
    }
    @return $new;
  }
  @function inline-svg($string) {
    @return url('data:image/svg+xml;charset=US-ASCII,#{url-encode($string)}');
  }
  
  
  // Scale up font sizes... From and to... this is different to using ems
  @mixin font-size($min, $max) {
      @include scale(font-size, $min, $max);
  }
  @mixin scale($property, $min, $max) {
      $max: strip-unit($max);
      $min: strip-unit($min);
      $difference: $max - $min;
  
      #{$property}: ($min + $difference) * 1px;
  
      @media (max-width: $bp-to-desktop-wide) {
          #{$property}: ($min + ($difference * 0.8)) * 1px;
      }
  
      @media (max-width: $bp-to-desktop) {
          #{$property}: ($min + ($difference * 0.6)) * 1px;
      }
  
      @media (max-width: $bp-to-tablet) {
          #{$property}: ($min + ($difference * 0.4)) * 1px;
      }
  
      @media (max-width: $bp-to-tween) {
          #{$property}: ($min + ($difference * 0.2)) * 1px;
      }
  
      @media (max-width: $bp-to-mobile) {
          #{$property}: $min * 1px;
      }
  }
  
  // Smooth scaling
  @mixin s-font-size($min, $max, $context: 1260) {
    @include scale(font-size, $min, $max, $context);
  }
  @mixin s-scale($property, $min, $max, $context: 1260) {
  
    $vw-context: (strip-unit($context) * .1) * 1px;
    $responsive: ($max / $vw-context) * 10vw;
  
    $responsive-unitless: strip-unit($responsive);
    $dimension: if(unit($responsive) == 'vh', 'height', 'width');
    $min-breakpoint: $min / $responsive-unitless * 100;
  
    @media (max-#{$dimension}: #{$min-breakpoint}) {
      #{$property}: $min;
    }
  
    $max-breakpoint: $max / $responsive-unitless * 100;
  
    @media (min-#{$dimension}: #{$max-breakpoint}) {
      #{$property}: $max;
    }
  
    #{$property}: $responsive;
  }
  
  // Make things scale to view width and context... useful inside media queries
  @function responsive($pixels, $context: 1260) {
    $vw-context: (strip-unit($context) * .1) * 1px;
    $responsive: ($pixels / $vw-context) * 10vw;
  
    @return $responsive;
  }
  
  // Media query mixin
  @mixin media($width) {
    @media (min-width: $width){
      @content;
    }
  }